<?php

/**
 * @file
 * Provides functions and callbacks for managing a global word list, for example
 * for managing blacklisted words.
 */

/**
 * Implements hook_menu().
 */
function wowitems_menu() {
  $items['admin/wowitems'] = array(
    'title' => 'WoW TESTING STUFF',
    'description' => 'wowitems description',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wowitems_page'),
    'access callback' => 'user_access',
    'access arguments' => array('administer_site_configuration'),
    'menu_name' => 'management',
  );
  return $items;
}

/**
 * Builds the form for configuring the Word list.
 */
function wowitems_page() {



  $accountColumns = [
    "id",
    "username",
    "sha_pass_hash",
    "sessionkey",
    "v",
    "s",
    "token_key",
    "email",
    "reg_mail",
    "joindate",
    "last_ip",
    "last_attempt_ip",
    "failed_logins",
    "locked",
    "lock_country",
    "last_login",
    "online",
    "expansion",
    "mutetime",
    "mutereason",
    "muteby",
    "locale",
    "os",
    "recruiter",
  ];
  test();




  $sql = "SELECT * FROM `account`";
  // Switch to the external DB
  db_set_active('auth');
// Get some data. The same rules about accessing the API functions apply here.
  $results = db_query($sql);

  db_set_active('default');
}

function test() {

//  $charname = $row->name;
  $errors = 0;
  $items_array = array();
  //mysql_select_db($config['char_db']);
//  $query_select_character = "SELECT guid, race, gender, playerBytes, playerBytes2 FROM characters.characters WHERE name = $charname LIMIT 1";


  $query_select_character = "SELECT guid, race, gender, playerBytes, playerBytes2 FROM characters WHERE name = 'Locku' LIMIT 1";

  db_set_active('characters');
  $result_select_character = db_query($query_select_character);
  db_set_active('default');


  if ($result_select_character->rowCount() == 1) { // If OK
    $row = $result_select_character->fetchAssoc();

    $character_unique_id = $row['guid'];
    print_r("Character Unique Id is: ");
    print_r($character_unique_id);
    $race = $row['race'];
    $gender = $row['gender'];
    $b = $row['playerBytes'];
    $b2 = $row['playerBytes2'];

    // Set Character Features
    $ha = ($b >> 16) % 256;
    $hc = ($b >> 24) % 256;
    $fa = ($b >> 8) % 256;
    $sk = $b % 256;
    $fh = $b2 % 256;

    // Set Character Race/Gender
    $char_race = array(
      1 => 'human',
      2 => 'orc',
      3 => 'dwarf',
      4 => 'nightelf',
      5 => 'scourge',
      6 => 'tauren',
      7 => 'gnome',
      8 => 'troll',
      10 => 'bloodelf',
      11 => 'draenei');

    $char_gender = array(
      0 => 'male',
      1 => 'female');

    $rg = $char_race[$race] . $char_gender[$gender];


    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////



    db_set_active('characters');
    $query_select_guid_drupal = "SELECT item FROM character_inventory WHERE guid = '$character_unique_id' AND bag='0' AND slot <'18'";
    $result_select_guid_drupal = db_query($query_select_guid_drupal);
    db_set_active('default');
//    print_r($result_select_guid_drupal->fetchAssoc());
//    die('asd');
    if ($result_select_guid_drupal->rowCount() != 0) {
      $eq = "";

      $array_select_guid_drupal = $result_select_guid_drupal->fetchAssoc();

//      print_r(count($array_select_guid_drupal));
//      die();
      while ($array_select_guid_drupal) {

        $item = $array_select_guid_drupal['item'];
        db_set_active('characters');
        $query_select_itemEntry_drupal = "SELECT itemEntry FROM item_instance WHERE guid = '$item'";
        $result_select_itemEntry_drupal = db_query($query_select_itemEntry_drupal);
        db_set_active('default');

        if ($result_select_itemEntry_drupal->rowCount() != 0) {
          $row_itemEntry_array = $result_select_itemEntry_drupal->fetchAssoc();

          while ($row_itemEntry_array) {
//            die('157');
            print_r($row_itemEntry_array);
            die();
            $itemEntry = $row_itemEntry_array['itemEntry'];
            if ($itemEntry != "") {
              $items_array[] = $itemEntry;
              print_r($items_array);
//              die('162');
//              var_dump($items_array);
//              die('dead@178');
              $query_select_item_drupal = "SELECT displayid, InventoryType FROM item_template WHERE entry = '$itemEntry' LIMIT 1";
              db_set_active('world');
              $result_select_item_drupal = db_query($query_select_item_drupal);
              db_set_active('default');


//               $result_select_item_drupal = $query_select_item_drupal->fetchAssoc();

              if ($result_select_item_drupal->rowCount() != 0) {

//                die('dead 175');
                $result_select_item_drupal_array = $result_select_item_drupal->fetchAssoc();
                $row_item = $result_select_item_drupal_array;
                print_r($row_item);
//                die('179');

                $displayid = $row_item['displayid'];
                $inventory_type = $row_item['InventoryType'];
                if ($eq == "") {
//                    print_r($displayid);
//                  die('eq is zero');
                  $eq = $inventory_type . ',' . $displayid;
//                  print_r($eq);
                }
                else {
                  $eq .= ',' . $inventory_type . ',' . $displayid;
                }

//                die('193');
              }
              else {
                die('ERROR SET 1');
                // If not OK
                echo '<p>The DisplayID could not be retrieved. We apologize for any inconvenience.</p>'; // Public message.
                echo '<p>' . mysql_error() . '<br /><br />Query: ' . $query . '</p>'; // Debugging message.
                $errors++;
              }
            }
            else {
              die('ERROR SET 2');
              // If not OK
              echo '<p>The itemEntry could not be retrieved. We apologize for any inconvenience.</p>'; // Public message.
              //echo '<p>' . mysql_error() . '<br /><br />Query: ' . $query . '</p>'; // Debugging message.
              $errors++;
            }
          }
          die('asd');
        }
        else {
          die('ERROR SET 3');
          // If not OK
          echo '<p>The Inventory could not be retrieved. We apologize for any inconvenience.</p>'; // Public message.
          //echo '<p>' . mysql_error() . '<br /><br />Query: ' . $query . '</p>'; // Debugging message.
          $errors++;
        }
      }
    }
    print_r($eq);
//    die();
  }
  else {
    // If not OK
    echo '<p>The Character could not be retrieved. We apologize for any inconvenience.</p>'; // Public message.
    //echo '<p>' . mysql_error() . '<br /><br />Query: ' . $query . '</p>'; // Debugging message.
    $errors++;
  }
  if ($errors == 0) {
    echo '<div id="model_scene" align="center">';
    echo '<object id="wowhead" type="application/x-shockwave-flash" data="http://static.wowhead.com/modelviewer/ModelView.swf" height="400px" width="300px">';
    echo '<param name="quality" value="high">';
    echo '<param name="allowscriptaccess" value="always">';
    echo '<param name="menu" value="false">';
    echo '<param value="transparent" name="wmode">';
    echo printf('<param name="flashvars" value="model=%s&amp;modelType=16&amp;ha=%s&amp;hc=%s&amp;fa=%s&amp;sk=%s&amp;fh=%s&amp;fc=0&amp;contentPath=http://static.wowhead.com/modelviewer/&amp;blur=0&amp;equipList=%s">', $rg, $ha, $hc, $fa, $sk, $fh, $eq);
    echo '<param name="movie" value="http://static.wowhead.com/modelviewer/ModelView.swf">';
    echo '</object>';
    echo '</div>';
//    print_r($items_array);
  }
}
