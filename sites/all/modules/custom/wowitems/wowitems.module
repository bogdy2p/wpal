<?php

/**
 * @file
 * Provides functions and callbacks for managing a global word list, for example
 * for managing blacklisted words.
 */

/**
 * Implements hook_menu().
 */
function wowitems_menu() {
  $items['admin/wowitems'] = array(
    'title' => 'WoW Accounts From DB',
    'description' => 'wowitems description',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wowitems_page'),
    'access callback' => 'user_access',
    'access arguments' => array('administer_site_configuration'),
    'menu_name' => 'management',
  );
  return $items;
}

/**
 * Builds the form for configuring the Word list.
 */
function wowitems_page() {


  $accountColumns = [
    "id",
    "username",
    "sha_pass_hash",
    "sessionkey",
    "v",
    "s",
    "token_key",
    "email",
    "reg_mail",
    "joindate",
    "last_ip",
    "last_attempt_ip",
    "failed_logins",
    "locked",
    "lock_country",
    "last_login",
    "online",
    "expansion",
    "mutetime",
    "mutereason",
    "muteby",
    "locale",
    "os",
    "recruiter",
  ];



  $sql = "SELECT * FROM `account`";
  // Switch to the external DB
  db_set_active('auth');
// Get some data. The same rules about accessing the API functions apply here.
  $results = db_query($sql);
  echo '<div class="tablewow">';
  echo '<table class="wowstuff">';
  echo '<h3> WoW Accounts </h3>';
  echo '<tr>';
  foreach ($accountColumns as $columnName) {
    echo'<td>';
    echo $columnName;
    echo'</td>';
  }
  echo '</tr>';
  foreach ($results as $result) {
    echo '<tr>';

    foreach ($accountColumns as $columnName) {
      echo'<td>';
      echo $result->$columnName;
      echo'</td>';
    }

//    echo'<td>';
//    echo $result->id;
//    echo'</td>';
//    echo'<td>';
//    echo $result->username;
//    echo'</td>';
//    echo'<td>';
//    echo $result->email;
//    echo'</td>';
//    echo'<td>';
//    echo $result->joindate;
//    echo'</td>';
//    echo '</tr>';
  }

  echo '</table>';
  echo '</div>';
// Switch back to the default db.
  db_set_active('default');


//  $form['wowitems_words'] = array(
//    '#type' => 'textarea',
//    '#title' => t('Words to include in the list'),
//    '#description' => t('The words included in this list will be availlable to Rules and other modules making use of the global "site" entity.'),
//    '#default_value' => implode("\r\n", variable_get('wowitems_words', array())),
//  );
//
//  $form['submit'] = array(
//    '#type' => 'submit',
//    '#value' => t('Save'),
//  );
//
//  
//  
////  dpm($newcon->getConnectionOptions());
//
//
//
//  return $form;
}

/**
 * Submit function for the wordlist configuration page.
 */
function wowitems_page_submit($form, $form_state) {
//  //Break up the list of words by line breaks.
//  $words = explode("\r\n", $form_state['input']['wordlist_words']);
//  wordlist_save_list($words);
//  drupal_set_message(t('The words have been saved!'));
//  dpm($words);
}

/**
 * Stores the globally accesible Word list words.
 * @param $words
 *  An array containing the words that should be stored.
 */
function wowitems_save_list(array $words) {
//  $removed = 0;
//  foreach ($words as $key => $value) {
//    if (strlen($value) == 0) {
//      unset($words[$key]);
//      $removed++;
//    }
//  }
//  //If any strings were removed , notify the user.
//  if ($removed > 0) {
//    drupal_set_message(t(
//            'Removed @number empty words.', array('@number' => $removed))
//    );
//  }
//  // Store the words in the variables table.
//  variable_set('wowitems_words', $words);
}

/**
 * Fetches the list of words as defined by Wordlist Module.
 * @return 
 *  An array of words not sanitized.
 */
function wowitems_get_list() {
//  return variable_get('wowitems_words', array());
}

/**
 * Implements hook_entity_property_info_alter(). 
 * @param type $info
 */
function wowitems_entity_property_info_alter(&$info) {
//  $info['site']['properties']['wowitems_words'] = array(
//    'label' => t('Wowitems list'),
//    'description' => t('A list of words as defined by the Wowitems list module'),
//    'getter callback' => 'wowitems_get_list',
//    'sanitize' => 'check_plain',
//    'type' => 'list<text>',
//  );
}
